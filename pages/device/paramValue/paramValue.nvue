<template>
	<view class="tabs">
		<!-- <ipForm v-show="!isShowPage" @closePv="closePv"></ipForm> -->
		<!-- <view v-show="isShowPage" style="width: 750upx; height: 1200upx;"> -->
		<scroll-view ref="tabbar1" id="tab-bar" class="tab-bar" :scroll="false" :scroll-x="true" :show-scrollbar="false"
			:scroll-into-view="scrollInto">
			<view style="flex-direction: column;">
				<view style="flex-direction: row;">
					<view class="uni-tab-item" v-for="(tab,index) in tabList" :key="'tab'+tab.dictValue"
						:id="'tab'+tab.dictValue" :ref="'tabitem'+index" :data-id="index" :data-current="index"
						@click="ontabtap">
						<text class="uni-tab-item-title"
							:class="tabIndex==index ? 'uni-tab-item-title-active' : ''">{{tab.dictLabel}}</text>
					</view>
				</view>
				<view class="scroll-view-indicator">
					<view ref="underline" class="scroll-view-underline" :class="isTap ? 'scroll-view-animation':''"
						:style="{left: indicatorLineLeft + 'px', width: indicatorLineWidth + 'px'}"></view>
				</view>
			</view>
		</scroll-view>
		<view class="tab-bar-line"></view>
		<swiper class="tab-view" :style="{height: swiperHeight + 'px'}" ref="swiper1" id="tab-bar-view"
			:current="tabIndex" :duration="300" @change="onswiperchange" @transition="onswiperscroll"
			@animationfinish="animationfinish" @onAnimationEnd="animationfinish">
			<swiper-item class="swiper-item" v-for="(page, index) in tabList" :key="index">
				<swiper-page class="swiper-page" :swHeight="swiperHeight" :page="page" :pid="page.pageId" ref="page">
				</swiper-page>
			</swiper-item>
		</swiper>
		<!-- // 保存按钮 -->
		<view class="btn-wrapper">
			<button class="btn-wrapper-button" plain type="primary" @click="submit(pageId)">保存</button>
		</view>
		<!-- </view> -->
		<!-- 切换机器 -->
<!-- 		<picker @change="bindPickerChange" :range="devIpList" ref="pb">
		</picker> -->
		<pop-picker :dataList="devIpList" :value="pkValue" :bindChange="bindPickerChange" @confirm="confirmSelect" ref="pb"></pop-picker>
	</view>
</template>

<script>
	import {
		listParamValue,
		updateParamValue
	} from "@/api/device/paramValue.js";
	import {
		getDicts
	} from "@/api/system/dict/data.js";
	import {
		listDevMsg
	} from '@/api/device/devMsg.js';

	import swiperPage from './swiper-page.nvue';
	import popPicker from "@/components/popPicker";

	// #ifdef APP-PLUS
	const dom = weex.requireModule('dom');
	// #endif
	
	const TAB_PRELOAD_OFFSET = 1;

	export default {
		components: {
			swiperPage,
			popPickers
		},
		watch: {
			queryParams(newVal, oldVal) {
				console.log(newVal)
			}
		},
		data() {
			let self = this
			return {
				isShowPage: false, // 是否显示参数列表
				ItabList: [],
				tabList: [],
				tabIndex: 0,
				scrollInto: "",
				indicatorLineLeft: 0,
				indicatorLineWidth: 0,
				isTap: false,
				pageId: 0,
				// 轮播页高度
				swiperHeight: self.getWindowHeight(),
				queryParams: {
					ip: null,
					paramSubType: 1,
					pageNum: 1,
					pageSize: 200
				},
				strValidParamName: ["产品名称"],
				// 设备id列表
				devList: [],
				pkIdx: 0,
				pkChange: false,
				pkValue: [0]
			}
		},
		onLoad() {
			// getDicts("param_sub_type").then(response => {
			// 	this.ItabList = response.data
			// 	console.log(this.ItabList)
			// 	return response
			// })
			// 监听ip传递
			let ip = uni.getStorageSync('devIp')
			let devName = uni.getStorageSync('devName')
			let status = uni.getStorageSync('status')
			if (ip) {
				this.queryParams.ip = ip
			}
			if (devName) {
				this.queryParams.devName = devName
			}
			this.setNavTitle(devName + ': ' + this.queryParams.ip)
			
			listDevMsg().then(res=>{
				console.log(res)
				this.devList = res.rows
				this.devIpList = res.rows.map((it,idx)=>{
					return it.devName + ': ' + it.ip
				})
			})

			this.loadTabPanelData()
			// uni.setNavigationBarTitle({
			// 	title: this.queryParams.ip
			// })

		},
		onReady() {
			this._lastTabIndex = 0;
			this.swiperWidth = 0;
			this.tabbarWidth = 0;
			this.tabListSize = {};
			this._touchTabIndex = 0;
			// this.selectorQuery();
		},
		onNavigationBarButtonTap: function(e) {
			console.log(e)
			console.log(this.$refs)
			this.$refs.pb.open()
		},
		methods: {
			// 设置页面标题
			setNavTitle(title) {
				uni.setNavigationBarTitle({
					title: title
				})
			},
			// 加载参数面板数据
			async loadTabPanelData() {
				// 获取tab标签数据
				let that = this
				let p1 = await getDicts("param_sub_type").then(response => {
					this.ItabList = response
					console.log(this.ItabList)
					return response
				})
				let queryParams = {
					// ip: that.queryParams.ip,
					devName: that.queryParams.devName,
					paramSubType: null,
					pageNum: 1,
					pageSize: 200
				}
				let p2 = await listParamValue(queryParams).then((res) => {
					return res
				});
				// 根据paramSubType筛选tabData并存入tdMap
				let tdMap = {}
				// console.log(p2);
				p2.rows.map((it, idx) => {
					if (it.paramSubType == 0) return;
					// 小数点格式化，用于显示
					if (it.paramName.indexOf(this.strValidParamName) == -1) {
						it.paramValue = (it.paramValue / Math.pow(10, it.decimalNum)).toFixed(it
							.decimalNum)
					}
					if (!tdMap[it.paramSubType]) {
						tdMap[it.paramSubType] = [];
						tdMap[it.paramSubType].push(it);
					} else {
						tdMap[it.paramSubType].push(it);
					}
				});
				console.log(tdMap);
				// 第二次遍历，对比并将tabData置入对应的tabList数组项
				that.tabList = p1.data.map((item, index) => {
					if (item.dictValue != 0) {
						let tabData = tdMap[item.dictValue]
						item["tabData"] = tabData
					}
					return item;
				});
				// 排除【其他参数】
				that.tabList.pop()
				that.tabList.pop()
				// that.getList()
				console.log(that.tabList)
				console.log('show')
				setTimeout(() => {
					this.pageList = this.$refs.page
					this.selectorQuery()
				}, 1000)

			},
			// 选项卡点击事件处理
			ontabtap(e) {
				let index = e.target.dataset.current || e.currentTarget.dataset.current;
				//let offsetIndex = this._touchTabIndex = Math.abs(index - this._lastTabIndex) > 1;

				// #ifdef APP-PLUS || H5 || MP-WEIXIN || MP-QQ
				this.isTap = true;
				var currentSize = this.tabListSize[index];
				this.updateIndicator(currentSize.left, currentSize.width);
				this._touchTabIndex = index;
				// #endif

				// 切换tab
				this.switchTab(index);
			},
			onswiperchange(e) {
				if (this.isTap) return;
				console.log('onswiperchange')
				// TODO 编译时注意是否会触发条件编译

				let index = e.target.current || e.detail.current;
				this.switchTab(index);

				/////#ifndef APP-PLUS || H5 || MP-WEIXIN || MP-QQ
				////#endif
			},
			onswiperscroll(e) {
				if (this.isTap) {
					return;
				}

				var offsetX = e.detail.dx;
				var preloadIndex = this._lastTabIndex;
				if (offsetX > TAB_PRELOAD_OFFSET) {
					preloadIndex++;
				} else if (offsetX < -TAB_PRELOAD_OFFSET) {
					preloadIndex--;
				}
				if (preloadIndex === this._lastTabIndex || preloadIndex < 0 || preloadIndex > this.pageList
					.length - 1) {
					return;
				}
				if (this.pageList[preloadIndex].dataList.length === 0) {
					this.loadTabData(preloadIndex);
				}

				// #ifdef APP-NVUE || APP-PLUS || H5 || MP-WEIXIN || MP-QQ
				var percentage = Math.abs(this.swiperWidth / offsetX);
				var currentSize = this.tabListSize[this._lastTabIndex];
				var preloadSize = this.tabListSize[preloadIndex];
				var lineL = currentSize.left + (preloadSize.left - currentSize.left) / percentage;
				var lineW = currentSize.width + (preloadSize.width - currentSize.width) / percentage;
				this.updateIndicator(lineL, lineW);
				// #endif
			},
			animationfinish(e) {
				// console.log('animationfinish')
				// #ifdef APP-NVUE || APP-PLUS || H5 || MP-WEIXIN || MP-QQ
				let index = e.detail.current;
				if (this._touchTabIndex === index) {
					this.isTap = false;
				}
				this._lastTabIndex = index;
				// this.switchTab(index);
				this.updateIndicator(this.tabListSize[index].left, this.tabListSize[index].width);
				// #endif
			},
			selectorQuery() {
				// #ifdef APP-NVUE
				// 查询 tabbar 宽度
				uni.createSelectorQuery().in(this).select('#tab-bar').boundingClientRect().exec(rect => {
					this.tabbarWidth = rect[0].width;
				});
				// 查询 tabview 宽度
				uni.createSelectorQuery().in(this).select('#tab-bar-view').boundingClientRect().exec(rect => {
					this.swiperWidth = rect[0].width;
				});

				// 因 nvue 暂不支持 class 查询
				var queryTabSize = uni.createSelectorQuery().in(this);
				for (var i = 0; i < this.tabList.length; i++) {
					queryTabSize.select('#tab' + this.tabList[i].dictValue).boundingClientRect();
				}
				queryTabSize.exec(rects => {
					console.log(JSON.stringify(rects));
					rects.forEach((rect) => {
						this.tabListSize[rect.dataset.id] = rect;
					})
				});
				// #endif

				// #ifdef MP-WEIXIN || H5 || MP-QQ
				console.log(1)
				uni.createSelectorQuery().in(this).select('.tab-view').fields({
					dataset: true,
					size: true,
				}, (res) => {
					this.swiperWidth = res.width;
				}).exec();
				uni.createSelectorQuery().in(this).selectAll('.uni-tab-item').boundingClientRect((
					rects) => {
					rects.forEach((rect) => {
						this.tabListSize[rect.dataset.id] = rect;
					})
					this.updateIndicator(this.tabListSize[this.tabIndex].left, this.tabListSize[
							this.tabIndex]
						.width);
				}).exec();
				// #endif
				console.log(this.tabListSize)
			},
			updateIndicator(left, width) {
				this.indicatorLineLeft = left;
				this.indicatorLineWidth = width;
			},
			switchTab(index) {

				// this.checkTipToSave(index)
				this.pageId = index
				if (this.pageList[index].dataList.length === 0) {
					this.loadTabData(index);
				}

				if (this.tabIndex === index) {
					return;
				}
				this.tabIndex = index;
				console.log('switch tab')
				// #ifdef APP-NVUE
				console.log('nvue')
				this.scrollTabTo(index);
				// #endif
				// #ifndef APP-NVUE
				console.log('not nvue')
				this.scrollInto = this.tabList[index].id;
				// #endif
			},
			scrollTabTo(index) {
				console.log(this.$refs)
				const el = this.$refs['tabitem' + index][0];
				let offset = 0;
				// TODO fix ios offset
				if (index > 0) {
					offset = this.tabbarWidth / 2 - this.tabListSize[index].width / 2;
					if (this.tabListSize[index].right < this.tabbarWidth / 2) {
						offset = this.tabListSize[0].width;
					}
				}
				dom.scrollToElement(el, {
					offset: -offset
				});
			},
			loadTabData(index) {
				this.pageList[index].loadData();
			},
			clearTabData(index) {
				this.pageList[index].clear();
			},
			// 获取屏幕高度
			getWindowHeight() {
				let height = 0
				uni.getSystemInfo({
					success(res) {
						height = res.windowHeight - uni.upx2px(300)
					}
				})
				return height
			},
			// 保存参数修改
			submit(pageId) {
				console.log(pageId)
				console.log(this.$refs)
				// 检测设备是否在线
				listDevMsg({devName: this.queryParams.devName}).then(res=>{
					if(res.rows.length > 0 && res.rows[0].status == 0){
						uni.showToast({
							title: '当前设备处于离线状态',
							icon: 'none',
							showCancel: false
						})
						return;
					}
					this.pageList[pageId].savePageData()
				})
			},
			// 检查页面是否切换，切换则提示保存
			checkTipToSave(index) {
				// 检查并提示页面修改
				console.log('check tab')
				let that = this
				console.log(this.pageId)
				console.log('index:' + index)
				let pageId = this.pageId
				let tabData = that.tabList[pageId].tabData
				let updIdMap = that.pageList[pageId].updIdMap
				console.log(tabData)
				console.log(updIdMap)
				// 提示是否保存之前页面的修改
				if (Object.keys(updIdMap).length > 0) {
					this.$modal.confirm('是否保存之前页面的修改？').then(function() {
						console.log('save data')
						that.pageList[pageId].savePageData(tabData);
					}).catch(err => {
						console.log(err)
						// 重置map
						console.log('clear')
						that.pageList[pageId].updIdMap = {}
					});
				}
			},
			// 校验用户权限
			hasPerm(perm) {
				return this.$auth.hasPermi(perm);
			},
			closePv(bool) {
				this.isShowPage = bool;
				if (bool) {
					this.loadTabPanelData()
				}
			},
			// picker更改事件
			bindPickerChange(e, w) {
				this.pkChange = true
				console.log(e.detail.value[0])
				// TODO 重新刷新该列表
				console.log(this.devList)
				console.log(this.devIpList)
				this.pkIdx = e.detail.value[0]
				// this.queryParams.ip = this.devList[e.detail.value[0]].ip
				// let devName = this.devList[e.detail.value].name
				// this.setNavTitle(devName + ': ' + this.queryParams.ip)
				// this.loadTabPanelData()
				if(!this.pkChange) this.pkIdx = 0
				this.queryParams.ip = this.devList[this.pkIdx].ip
				let devName = this.devList[this.pkIdx].devName
				this.setNavTitle(devName + ': ' + this.queryParams.ip)
				this.loadTabPanelData()
				this.pkChange = false
			},  
			confirmSelect(){
				// 如果picker没有被修改过，将pkIdx改为0
				if(!this.pkChange) this.pkIdx = 0
				this.queryParams.ip = this.devList[this.pkIdx].ip
				let devName = this.devList[this.pkIdx].devName
				this.setNavTitle(devName + ': ' + this.queryParams.ip)
				this.loadTabPanelData()
				this.pkChange = false
			}
		}
	}
</script>

<style>
	/* #ifndef APP-PLUS */
	page {
		width: 100%;
		min-height: 100%;
		display: flex;
	}

	/* #endif */

	.page {
		flex: 1;
	}

	.flexible-view {
		background-color: #f823ff;
	}

	.tabs {
		flex: 1;
		flex-direction: column;
		overflow: hidden;
		background-color: #ffffff;
		/* #ifdef MP-ALIPAY || MP-BAIDU */
		height: 100vh;
		/* #endif */
	}

	.tab-bar {
		width: 750upx;
		height: 84upx;
		flex-direction: row;
		/* #ifndef APP-PLUS */
		white-space: nowrap;
		/* #endif */
	}

	/* #ifndef APP-NVUE */
	.tab-bar ::-webkit-scrollbar {
		display: none;
		width: 0 !important;
		height: 0 !important;
		-webkit-appearance: none;
		background: transparent;
	}

	/* #endif */

	.scroll-view-indicator {
		position: relative;
		height: 2px;
		background-color: transparent;
	}

	.scroll-view-underline {
		position: absolute;
		top: 0;
		bottom: 0;
		width: 0;
		background-color: #007AFF;
	}

	.scroll-view-animation {
		transition-duration: 0.2s;
		transition-property: left;
	}

	.tab-bar-line {
		height: 1upx;
		background-color: #cccccc;
	}

	.tab-view {
		flex: 1;
	}

	.uni-tab-item {
		/* #ifndef APP-PLUS */
		display: inline-block;
		/* #endif */
		flex-wrap: nowrap;
		padding-left: 25px;
		padding-right: 25px;
	}

	.uni-tab-item-title {
		color: #555;
		font-size: 30upx;
		height: 80upx;
		line-height: 80upx;
		flex-wrap: nowrap;
		/* #ifndef APP-PLUS */
		white-space: nowrap;
		/* #endif */
	}

	.uni-tab-item-title-active {
		color: #007AFF;
	}

	.swiper-item {
		flex: 1;
		flex-direction: column;
	}

	.swiper-page {
		flex: 1;
		flex-direction: column;
		position: absolute;
		left: 0;
		top: 0;
		right: 0;
		bottom: 0;
	}

	.btn-wrapper {
		display: flex;
		align-items: center;
		/* align: center; */
		height: 80upx;
		/* 		margin-top: 20upx;
		margin-bottom: 10upx;
		margin-left: 60upx; */
		margin: 20upx 0 20upx 60upx
	}

	.btn-wrapper-button {
		/* width: 40%; */
		width: 120upx;
		line-height: 80upx;
		height: 80upx;
	}
</style>
